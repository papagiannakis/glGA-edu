//
//  glGAMath.cpp
//
//
//  Created by George Papagiannakis on 6/2/13.
//  Copyright (c) 2013 UoC & FORTH. All rights reserved.
//

#include <iostream>

#include <glGAMath/glGAMath.h>

#include <glGAMath/e3ga.h>
#include <glGAMath/e3ga_util.h>

#if INTERPOLATION==GA_VERSOR || INTERPOLATION==CGA_VERSOR
#include "util/vsr_cga3D_app.h"
#include "form/vsr_cga3D_frame.h"
#include "form/vsr_field.h"
#endif

#if INTERPOLATION==GA_VERSOR || INTERPOLATION==CGA_VERSOR
using namespace vsr;
using namespace vsr::cga;
#endif

void    printVec4GLM(std::string vecName,glm::vec4& vec)
{
    std::cout<<"\t\n"<<vecName<<": "<<vec.x<<" "<<vec.y<<" "<<vec.z<<" "<<vec.w<<std::endl;
    
}

void    printQuatfGML(std::string  quatName,glm::quat& quat)
{
    std::cout<<"\t\n"<<quatName<<" (w,x,y,z): "<<quat.w<<" "<<quat.x<<" "<<quat.y<<" "<<quat.z<<std::endl;
}

void    printMat4GML(std::string  matName,glm::mat4& mat)
{
    static glm::mat4 temp = glm::mat4(1.0);
    static bool firstTime=true;
    
    int i,j;
    
    if (firstTime)
    {
        temp=mat;
        firstTime=false;
        
        std::cout<<"\n\t"<<matName<<": "<<std::endl;
        for (i=0; i<4; i++)
        {
            for (j=0; j<4; j++)
            {
                std::cout<<" "<<mat[j][i];
            }
            printf("\n");
        }
    }
    else if (temp==mat) {
        firstTime=false;
    }
    else
    {
        std::cout<<"\n\t"<<matName<<": "<<std::endl;
        for (i=0; i<4; i++)
        {
            for (j=0; j<4; j++)
            {
                std::cout<<" "<<mat[j][i];
            }
            printf("\n");
        }
    }
}//end printMat4GML

#if INTERPOLATION==GA_VERSOR || INTERPOLATION==CGA_VERSOR
vsr::cga::Mot geTrE()
{
    vsr::cga::Mot x;
    return x;
}
#endif

void aiMat2glmMat(const aiMatrix4x4 *from, glm::mat4 &to) {
    to[0][0] = from->a1; to[1][0] = from->a2;
    to[2][0] = from->a3; to[3][0] = from->a4;
    to[0][1] = from->b1; to[1][1] = from->b2;
    to[2][1] = from->b3; to[3][1] = from->b4;
    to[0][2] = from->c1; to[1][2] = from->c2;
    to[2][2] = from->c3; to[3][2] = from->c4;
    to[0][3] = from->d1; to[1][3] = from->d2;
    to[2][3] = from->d3; to[3][3] = from->d4;
}

#ifdef USE_LIBGASANDBOX

aiQuaternion  calculateGA_GAALOP(aiRotor srcR, aiRotor dstR, float factor) {
    
    float finalRes[32];
    float interpolated[32];
    float R[32];
    float R2[32];
    
    R[0] = srcR.w;
    R[4] = srcR.x;
    R[5] = srcR.y;
    R[6] = srcR.z;
    
    R2[0] = dstR.w;
    R2[4] = dstR.x;
    R2[5] = dstR.y;
    R2[6] = dstR.z;
    
    aiQuaternion Out;
    interpolated[0] = (0.0416666679084301 * pow(factor,4.0) * pow(R[6],4.0) + ((-(0.25 * pow(factor,4.0) * R[5] * R[5])) - 0.25 * pow(factor,4.0) * R[4] * R[4] - 0.25 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0416666679084301 * pow(factor,4.0) * pow(R[5],4.0) + (0.0833333358168602 * pow(factor,4.0) * R[4] * R[4] + 0.0833333358168602 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.0416666679084301 * pow(factor,4.0) * pow(R[4],4.0) + 0.0833333358168602 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0416666679084301 * pow(factor,4.0) * pow(R[0],4.0)) * pow(R2[6],4.0) + ((0.6666666865348816 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + (((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[4])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) * R2[5] + (0.6666666865348816 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] + ((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5])) - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) * R2[4] + (0.6666666865348816 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + ((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) * R2[0] + 0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + ((-((factor * factor * factor) / 2.0 * R[5] * R[5])) - (factor * factor * factor) / 2.0 * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[6]) * R2[6] * R2[6] * R2[6] + (((((-(0.25 * pow(factor,4.0) * pow(R[6],4.0))) + (1.5 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 0.25 * pow(factor,4.0) * pow(R[5],4.0) + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.0833333358168602 * pow(factor,4.0) * pow(R[4],4.0) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0833333358168602 * pow(factor,4.0) * pow(R[0],4.0)) * R2[5] * R2[5] + (((3.3333332538604736 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + ((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] + (3.3333332538604736 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] + 1.5 * factor * factor * factor * R[5] * R[6] * R[6]) - (factor * factor * factor) / 2.0 * R[5] * R[5] * R[5] + ((-((factor * factor * factor) / 2.0 * R[4] * R[4])) - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[5]) * R2[5] + (((-(0.25 * pow(factor,4.0) * pow(R[6],4.0))) + (((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[5])) + 1.5 * pow(factor,4.0) * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0833333358168602 * pow(factor,4.0) * pow(R[5],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[5] * R[5]) - 0.25 * pow(factor,4.0) * pow(R[4],4.0) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0833333358168602 * pow(factor,4.0) * pow(R[0],4.0)) * R2[4] * R2[4] + (((3.3333332538604736 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] + 1.5 * factor * factor * factor * R[4] * R[6] * R[6]) - (factor * factor * factor) / 2.0 * R[4] * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[4] * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[4]) * R2[4] + (((-(0.25 * pow(factor,4.0) * pow(R[6],4.0))) + ((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 1.5 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0833333358168602 * pow(factor,4.0) * pow(R[5],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.0833333358168602 * pow(factor,4.0) * pow(R[4],4.0)) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] - 0.25 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] * R2[0] + (1.5 * factor * factor * factor * R[0] * R[6] * R[6] - (factor * factor * factor) / 2.0 * R[0] * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[0] * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[0]) * R2[0] + (factor * factor) / 2.0 * R[6] * R[6]) - (factor * factor) / 2.0 * R[5] * R[5] - (factor * factor) / 2.0 * R[4] * R[4] - (factor * factor) / 2.0 * R[0] * R[0]) * R2[6] * R2[6] + (((0.6666666865348816 * pow(factor,4.0) * R[5] * R[5] * R[5] + ((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[4])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6]) * R2[5] * R2[5] * R2[5] + ((((3.3333332538604736 * pow(factor,4.0) * R[4] * R[5] * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6]) * R2[4] + ((3.3333332538604736 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6]) * R2[0]) - (factor * factor * factor) / 2.0 * R[6] * R[6] * R[6] + (1.5 * factor * factor * factor * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[6]) * R2[5] * R2[5] + ((((3.3333332538604736 * pow(factor,4.0) * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6]) * R2[4] * R2[4] + (8.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] * R2[0] + 4.0 * factor * factor * factor * R[4] * R[5] * R[6]) * R2[4] + (((3.3333332538604736 * pow(factor,4.0) * R[0] * R[0] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[4]) * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6]) * R2[0] * R2[0] + 4.0 * factor * factor * factor * R[0] * R[5] * R[6] * R2[0] + 2.0 * factor * factor * R[5] * R[6]) * R2[5] + ((((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6]) * R2[4] * R2[4] * R2[4] + (((((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 3.3333332538604736 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6]) * R2[0] - (factor * factor * factor) / 2.0 * R[6] * R[6] * R[6] + (((-((factor * factor * factor) / 2.0 * R[5] * R[5])) + 1.5 * factor * factor * factor * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[6]) * R2[4] * R2[4] + ((((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5])) - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4] + 3.3333332538604736 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6]) * R2[0] * R2[0] + 4.0 * factor * factor * factor * R[0] * R[4] * R[6] * R2[0] + 2.0 * factor * factor * R[4] * R[6]) * R2[4] + (((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6]) * R2[0] * R2[0] * R2[0] + (((-((factor * factor * factor) / 2.0 * R[5] * R[5])) - (factor * factor * factor) / 2.0 * R[4] * R[4] + 1.5 * factor * factor * factor * R[0] * R[0]) * R[6] - (factor * factor * factor) / 2.0 * R[6] * R[6] * R[6]) * R2[0] * R2[0] + 2.0 * factor * factor * R[0] * R[6] * R2[0] + factor * R[6]) * R2[6] + (0.0416666679084301 * pow(factor,4.0) * pow(R[6],4.0) + ((-(0.25 * pow(factor,4.0) * R[5] * R[5])) + 0.0833333358168602 * pow(factor,4.0) * R[4] * R[4] + 0.0833333358168602 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0416666679084301 * pow(factor,4.0) * pow(R[5],4.0) + ((-(0.25 * pow(factor,4.0) * R[4] * R[4])) - 0.25 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.0416666679084301 * pow(factor,4.0) * pow(R[4],4.0) + 0.0833333358168602 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0416666679084301 * pow(factor,4.0) * pow(R[0],4.0)) * pow(R2[5],4.0) + ((((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6])) + 0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + ((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] + ((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6])) + 0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0]) - (factor * factor * factor) / 2.0 * R[5] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + ((-((factor * factor * factor) / 2.0 * R[4] * R[4])) - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[5]) * R2[5] * R2[5] * R2[5] + ((((((0.0833333358168602 * pow(factor,4.0) * pow(R[6],4.0) + ((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 0.25 * pow(factor,4.0) * pow(R[5],4.0) + (1.5 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) - 0.25 * pow(factor,4.0) * pow(R[4],4.0) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0833333358168602 * pow(factor,4.0) * pow(R[0],4.0)) * R2[4] * R2[4] + (((((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6])) + 3.3333332538604736 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] - (factor * factor * factor) / 2.0 * R[4] * R[6] * R[6] + 1.5 * factor * factor * factor * R[4] * R[5] * R[5]) - (factor * factor * factor) / 2.0 * R[4] * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[4]) * R2[4] + (((0.0833333358168602 * pow(factor,4.0) * pow(R[6],4.0) + (((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 0.25 * pow(factor,4.0) * pow(R[5],4.0) + (1.5 * pow(factor,4.0) * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[5] * R[5] + 0.0833333358168602 * pow(factor,4.0) * pow(R[4],4.0)) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] - 0.25 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] * R2[0] + (((-((factor * factor * factor) / 2.0 * R[0] * R[6] * R[6])) + 1.5 * factor * factor * factor * R[0] * R[5] * R[5]) - (factor * factor * factor) / 2.0 * R[0] * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[0]) * R2[0]) - (factor * factor) / 2.0 * R[6] * R[6] + (factor * factor) / 2.0 * R[5] * R[5]) - (factor * factor) / 2.0 * R[4] * R[4] - (factor * factor) / 2.0 * R[0] * R[0]) * R2[5] * R2[5] + (((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6])) - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] * R2[4] * R2[4] + (((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (3.3333332538604736 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] - (factor * factor * factor) / 2.0 * R[5] * R[6] * R[6] - (factor * factor * factor) / 2.0 * R[5] * R[5] * R[5] + (1.5 * factor * factor * factor * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[5]) * R2[4] * R2[4] + (((-(0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6])) - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (3.3333332538604736 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.6666666865348816 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + 4.0 * factor * factor * factor * R[0] * R[4] * R[5] * R2[0] + 2.0 * factor * factor * R[4] * R[5]) * R2[4] + ((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] * R2[0] + ((-((factor * factor * factor) / 2.0 * R[5] * R[6] * R[6])) - (factor * factor * factor) / 2.0 * R[5] * R[5] * R[5] + (1.5 * factor * factor * factor * R[0] * R[0] - (factor * factor * factor) / 2.0 * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + 2.0 * factor * factor * R[0] * R[5] * R2[0] + factor * R[5]) * R2[5] + ((0.0416666679084301 * pow(factor,4.0) * pow(R[6],4.0) + (0.0833333358168602 * pow(factor,4.0) * R[5] * R[5] - 0.25 * pow(factor,4.0) * R[4] * R[4] + 0.0833333358168602 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0416666679084301 * pow(factor,4.0) * pow(R[5],4.0) + (0.0833333358168602 * pow(factor,4.0) * R[0] * R[0] - 0.25 * pow(factor,4.0) * R[4] * R[4]) * R[5] * R[5] + 0.0416666679084301 * pow(factor,4.0) * pow(R[4],4.0)) - 0.25 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0416666679084301 * pow(factor,4.0) * pow(R[0],4.0)) * pow(R2[4],4.0) + (((((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] - (factor * factor * factor) / 2.0 * R[4] * R[6] * R[6] - (factor * factor * factor) / 2.0 * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[4]) * R2[4] * R2[4] * R2[4] + ((((((0.0833333358168602 * pow(factor,4.0) * pow(R[6],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0833333358168602 * pow(factor,4.0) * pow(R[5],4.0) + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) - 0.25 * pow(factor,4.0) * pow(R[4],4.0) + 1.5 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) - 0.25 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] * R2[0] + (((-((factor * factor * factor) / 2.0 * R[0] * R[6] * R[6])) - (factor * factor * factor) / 2.0 * R[0] * R[5] * R[5] + 1.5 * factor * factor * factor * R[0] * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[0]) * R2[0]) - (factor * factor) / 2.0 * R[6] * R[6] - (factor * factor) / 2.0 * R[5] * R[5] + (factor * factor) / 2.0 * R[4] * R[4]) - (factor * factor) / 2.0 * R[0] * R[0]) * R2[4] * R2[4] + (((-(0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6])) - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.6666666865348816 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.6666666865348816 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] * R2[0] + ((-((factor * factor * factor) / 2.0 * R[4] * R[6] * R[6])) - (factor * factor * factor) / 2.0 * R[4] * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[4] * R[4] * R[4] + 1.5 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[0] * R2[0] + 2.0 * factor * factor * R[0] * R[4] * R2[0] + factor * R[4]) * R2[4] + ((0.0416666679084301 * pow(factor,4.0) * pow(R[6],4.0) + ((0.0833333358168602 * pow(factor,4.0) * R[5] * R[5] + 0.0833333358168602 * pow(factor,4.0) * R[4] * R[4]) - 0.25 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.0416666679084301 * pow(factor,4.0) * pow(R[5],4.0) + (0.0833333358168602 * pow(factor,4.0) * R[4] * R[4] - 0.25 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.0416666679084301 * pow(factor,4.0) * pow(R[4],4.0)) - 0.25 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.0416666679084301 * pow(factor,4.0) * pow(R[0],4.0)) * pow(R2[0],4.0) + ((-((factor * factor * factor) / 2.0 * R[0] * R[6] * R[6])) - (factor * factor * factor) / 2.0 * R[0] * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[0] * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[0] * R2[0] * R2[0] + ((-((factor * factor) / 2.0 * R[6] * R[6])) - (factor * factor) / 2.0 * R[5] * R[5] - (factor * factor) / 2.0 * R[4] * R[4] + (factor * factor) / 2.0 * R[0] * R[0]) * R2[0] * R2[0] + factor * R[0] * R2[0] + 1.0; // 1.0
    interpolated[4] = ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + (((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) * pow(R2[6],4.0) + (((((-(0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0))) + (pow(factor,4.0) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) * R2[5] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] + (((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] + (factor * factor * factor) / 2.0 * R[5] * R[6] * R[6]) - 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * factor * factor * factor * R[4] * R[4])) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[6] * R2[6] * R2[6] + ((pow(factor,4.0) * R[5] * R[5] * R[5] * R[6] - pow(factor,4.0) * R[5] * R[6] * R[6] * R[6]) * R2[5] * R2[5] + (((((-(0.8333333134651184 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (2.1666667461395264 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[4] + ((-(0.8333333134651184 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (2.1666667461395264 * pow(factor,4.0) * R[0] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0]) - (factor * factor * factor) / 2.0 * R[6] * R[6] * R[6] + (1.5 * factor * factor * factor * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6]) * R2[5] + (((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] * R2[4] + (((((0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[6] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0)) - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] + (factor * factor * factor) / 2.0 * R[0] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[4] + ((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] + ((-((factor * factor * factor) / 2.0 * R[4] * R[6] * R[6])) + 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] + 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[0] + factor * factor * R[5] * R[6]) * R2[6] * R2[6] + ((0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + ((-(pow(factor,4.0) * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) * R2[5] * R2[5] * R2[5] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) - 2.1666667461395264 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0]) - 1.5 * factor * factor * factor * R[5] * R[6] * R[6] + (factor * factor * factor) / 2.0 * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * factor * factor * factor * R[4] * R[4])) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[5] * R2[5] + ((((0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[6] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + (0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) * R2[4] * R2[4] + (((-(2.0 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6])) + (2.0 * pow(factor,4.0) * R[0] * R[0] - 2.0 * pow(factor,4.0) * R[4] * R[4]) * R[5] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) * R2[0] - 1.3333333730697632 * factor * factor * factor * R[4] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] + 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[5]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] - 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[5] * R[5]) * R2[0] * R2[0] + ((-(1.3333333730697632 * factor * factor * factor * R[0] * R[6] * R[6])) - 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[5]) * R2[0]) - factor * factor * R[6] * R[6] + factor * factor * R[5] * R[5]) * R2[5] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] * R2[4] * R2[4] + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] * R[4] + 2.1666667461395264 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6]) - 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + ((factor * factor * factor) / 2.0 * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[4] * R2[4] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + ((1.3333333730697632 * factor * factor * factor * R[0] * R[0] - 1.3333333730697632 * factor * factor * factor * R[4] * R[4]) * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[0] + factor * factor * R[0] * R[6] + factor * factor * R[4] * R[5]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] * R2[0] + ((-(0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6])) - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6] - 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + ((factor * factor * factor) / 2.0 * R[0] * R[0] - 0.1666666716337204 * factor * factor * factor * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + (factor * factor * R[0] * R[5] - factor * factor * R[4] * R[6]) * R2[0] + factor * R[5]) * R2[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) * pow(R2[5],4.0) + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] + 0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + ((-((factor * factor * factor) / 2.0 * R[5] * R[5])) + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6]) * R2[5] * R2[5] * R2[5] + ((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[5]) * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] * R2[4] + (((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0)) - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6] - 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6] + (factor * factor * factor) / 2.0 * R[0] * R[5] * R[5]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] + (0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] - 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] - (factor * factor * factor) / 2.0 * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[0]) - factor * factor * R[5] * R[6]) * R2[5] * R2[5] + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[4] * R2[4] * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (2.1666667461395264 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * R2[0] + 0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + (0.1666666716337204 * factor * factor * factor * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[4] * R2[4] + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[0] - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + ((1.3333333730697632 * factor * factor * factor * R[0] * R[0] - 1.3333333730697632 * factor * factor * factor * R[4] * R[4]) * R[5] - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6]) * R2[0]) - factor * factor * R[4] * R[6] + factor * factor * R[0] * R[5]) * R2[4] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] * R2[0] * R2[0] + ((0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + ((0.1666666716337204 * factor * factor * factor * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[6]) - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[0] * R2[0] + ((-(factor * factor * R[0] * R[6])) - factor * factor * R[4] * R[5]) * R2[0]) - factor * R[6]) * R2[5] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * pow(R2[4],4.0) + ((((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) + pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6] - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] + (factor * factor * factor) / 2.0 * R[0] * R[4] * R[4]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[4] * R2[4] * R2[4] + ((pow(factor,4.0) * R[0] * R[0] * R[0] * R[4] - pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) * R2[0] * R2[0] + ((0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5]) - (factor * factor * factor) / 2.0 * R[4] * R[4] * R[4] + 1.5 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[0] + factor * factor * R[0] * R[4]) * R2[4] * R2[4] + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0)) - pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] * R2[0] * R2[0] + ((-(0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6])) - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] - 1.5 * factor * factor * factor * R[0] * R[4] * R[4] + (factor * factor * factor) / 2.0 * R[0] * R[0] * R[0]) * R2[0] * R2[0] + (factor * factor * R[0] * R[0] - factor * factor * R[4] * R[4]) * R2[0] + factor * R[0]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * pow(R2[0],4.0) + ((0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[4]) * R2[0] * R2[0] * R2[0]) - factor * factor * R[0] * R[4] * R2[0] * R2[0] - factor * R[4] * R2[0]; // e1 ^ e2
    interpolated[5] = (((0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6]) * pow(R2[6],4.0) + (((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[5] + (0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + ((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[5])) - pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[4] + ((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0]) - (factor * factor * factor) / 2.0 * R[4] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[6] * R2[6] * R2[6] + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[5] * R2[5] + ((((0.8333333134651184 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (((-(2.1666667461395264 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] + (((0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[5] * R[5]) * R[6] * R[6] - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] + (factor * factor * factor) / 2.0 * R[0] * R[6] * R[6]) - 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6] - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[5] + (pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - pow(factor,4.0) * R[4] * R[4] * R[4] * R[6]) * R2[4] * R2[4] + ((0.8333333134651184 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] + (factor * factor * factor) / 2.0 * R[6] * R[6] * R[6] + ((-(0.1666666716337204 * factor * factor * factor * R[5] * R[5])) - 1.5 * factor * factor * factor * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6]) * R2[4] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] * R2[0] + ((-((factor * factor * factor) / 2.0 * R[5] * R[6] * R[6])) - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[0]) - factor * factor * R[4] * R[6]) * R2[6] * R2[6] + (((((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[5] * R2[5] * R2[5] + (((((-(0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0))) + (0.8333333134651184 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6]) - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 2.1666667461395264 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.8333333134651184 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] + 0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6]) - (factor * factor * factor) / 2.0 * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[5] * R2[5] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 2.1666667461395264 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * R2[4] * R2[4] + ((((2.0 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (2.0 * pow(factor,4.0) * R[0] * R[0] * R[4] - 2.0 * pow(factor,4.0) * R[4] * R[5] * R[5]) * R[6]) - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[5]) * R2[0] + 1.3333333730697632 * factor * factor * factor * R[5] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6]) - 1.3333333730697632 * factor * factor * factor * R[4] * R[4] * R[5]) * R2[4] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(2.1666667461395264 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] * R2[0] + ((1.3333333730697632 * factor * factor * factor * R[0] * R[0] - 1.3333333730697632 * factor * factor * factor * R[5] * R[5]) * R[6] - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[0] + factor * factor * R[0] * R[6]) - factor * factor * R[4] * R[5]) * R2[5] + (((-(0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0))) + (((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[5])) + pow(factor,4.0) * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[4] * R2[4] * R2[4] + ((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[5]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] + 1.5 * factor * factor * factor * R[4] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5]) - (factor * factor * factor) / 2.0 * R[4] * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[4] * R2[4] + ((((((-(0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0))) + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5]) * R[6] * R[6]) - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0)) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[0] * R2[0] + (1.3333333730697632 * factor * factor * factor * R[0] * R[6] * R[6] - 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6] - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[4]) * R2[0] + factor * factor * R[6] * R[6]) - factor * factor * R[4] * R[4]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] * R2[0] + ((0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] - 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] + 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0] * R[4]) * R2[0] * R2[0] + ((-(factor * factor * R[5] * R[6])) - factor * factor * R[0] * R[4]) * R2[0]) - factor * R[4]) * R2[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * pow(R2[5],4.0) + ((((((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] + (((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6] + (factor * factor * factor) / 2.0 * R[0] * R[5] * R[5]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[5] * R2[5] * R2[5] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[4] * R2[4] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 2.1666667461395264 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + ((factor * factor * factor) / 2.0 * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[4] + (pow(factor,4.0) * R[0] * R[0] * R[0] * R[5] - pow(factor,4.0) * R[0] * R[5] * R[5] * R[5]) * R2[0] * R2[0] + (0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6] - (factor * factor * factor) / 2.0 * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 1.5 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[0] + factor * factor * R[0] * R[5]) * R2[5] * R2[5] + (((((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] * R2[4] * R2[4] + (((((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0)) - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] * R[5] * R[5] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] + (factor * factor * factor) / 2.0 * R[0] * R[4] * R[4]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[4] * R2[4] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6]) - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] + (1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] - 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[5] + 1.3333333730697632 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[0] + factor * factor * R[5] * R[6] + factor * factor * R[0] * R[4]) * R2[4] + (((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] * R2[0] * R2[0] + ((-(0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6])) - 1.5 * factor * factor * factor * R[0] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] + (factor * factor * factor) / 2.0 * R[0] * R[0] * R[0]) * R2[0] * R2[0] + (factor * factor * R[0] * R[0] - factor * factor * R[5] * R[5]) * R2[0] + factor * R[0]) * R2[5] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6]) * pow(R2[4],4.0) + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + (((-(0.1666666716337204 * factor * factor * factor * R[5] * R[5])) + (factor * factor * factor) / 2.0 * R[4] * R[4]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6]) * R2[4] * R2[4] * R2[4] + (((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + (0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[0] * R[0] - (factor * factor * factor) / 2.0 * R[4] * R[4]) * R[5]) * R2[0] + factor * factor * R[4] * R[6]) * R2[4] * R2[4] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] * R2[0] * R2[0] + (((-(0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6])) + ((-(0.1666666716337204 * factor * factor * factor * R[5] * R[5])) - 0.1666666716337204 * factor * factor * factor * R[4] * R[4] + (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[6]) - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[0] * R2[0] + (factor * factor * R[0] * R[6] - factor * factor * R[4] * R[5]) * R2[0] + factor * R[6]) * R2[4] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * pow(R2[0],4.0) + (0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[5]) * R2[0] * R2[0] * R2[0]) - factor * factor * R[0] * R[5] * R2[0] * R2[0] - factor * R[5] * R2[0]; // e1 ^ e3
    interpolated[6] = ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) * pow(R2[6],4.0) + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[5] + (((-(0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] + (((-(0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0))) + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] + (factor * factor * factor) / 2.0 * R[0] * R[6] * R[6]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[6] * R2[6] * R2[6] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) + 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[5] * R2[5] + (((((0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[5] * R[5]) * R[6] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[4] + (((-(0.8333333134651184 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 2.1666667461395264 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] + (factor * factor * factor) / 2.0 * R[4] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6]) - 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6])) - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[4] * R2[4] + (((-(0.8333333134651184 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 2.1666667461395264 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] - (factor * factor * factor) / 2.0 * R[5] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[4] + (pow(factor,4.0) * R[0] * R[0] * R[0] * R[6] - pow(factor,4.0) * R[0] * R[6] * R[6] * R[6]) * R2[0] * R2[0] + ((0.1666666716337204 * factor * factor * factor * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 1.5 * factor * factor * factor * R[0] * R[0]) * R[6] - (factor * factor * factor) / 2.0 * R[6] * R[6] * R[6]) * R2[0] + factor * factor * R[0] * R[6]) * R2[6] * R2[6] + (((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[5] * R2[5] * R2[5] + (((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((2.1666667461395264 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.8333333134651184 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[5] * R[5]) * R[6] * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6] + 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6] + (factor * factor * factor) / 2.0 * R[0] * R[5] * R[5]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[5] * R2[5] + ((((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (((-(2.1666667461395264 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[4] * R2[4] + (((-(2.0 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6])) + (2.0 * pow(factor,4.0) * R[0] * R[4] * R[4] - 2.0 * pow(factor,4.0) * R[0] * R[5] * R[5]) * R[6] + 2.0 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[5]) * R2[0] + (1.3333333730697632 * factor * factor * factor * R[4] * R[4] - 1.3333333730697632 * factor * factor * factor * R[5] * R[5]) * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[4] + (((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6])) - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5])) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[0] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + ((-(1.3333333730697632 * factor * factor * factor * R[5] * R[6] * R[6])) + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[0] * R[5]) * R2[0] + factor * factor * R[4] * R[6] + factor * factor * R[0] * R[5]) * R2[5] + (((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[4] * R2[4] * R2[4] + (((((0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[6] * R[6]) - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[5] * R[5] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[0] * R[6] * R[6] - 1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6] - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] + (factor * factor * factor) / 2.0 * R[0] * R[4] * R[4]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[0]) * R2[4] * R2[4] + ((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] + ((-(1.3333333730697632 * factor * factor * factor * R[4] * R[6] * R[6])) - 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[0]) - factor * factor * R[5] * R[6] + factor * factor * R[0] * R[4]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * pow(R[6],4.0) + ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) - pow(factor,4.0) * R[0] * R[0]) * R[6] * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * pow(R[0],4.0)) * R2[0] * R2[0] * R2[0] + ((-(1.5 * factor * factor * factor * R[0] * R[6] * R[6])) - 0.1666666716337204 * factor * factor * factor * R[0] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[0] * R[4] * R[4] + (factor * factor * factor) / 2.0 * R[0] * R[0] * R[0]) * R2[0] * R2[0] + (factor * factor * R[0] * R[0] - factor * factor * R[6] * R[6]) * R2[0] + factor * R[0]) * R2[6] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + ((-(0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4])) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * pow(R2[5],4.0) + ((((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + (pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0]) * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5]) * R[6] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0]) - 0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] + (factor * factor * factor) / 2.0 * R[4] * R[5] * R[5]) - 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[5] * R2[5] * R2[5] + ((pow(factor,4.0) * R[4] * R[4] * R[4] * R[5] - pow(factor,4.0) * R[4] * R[5] * R[5] * R[5]) * R2[4] * R2[4] + ((((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((-(0.8333333134651184 * pow(factor,4.0) * R[4] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] + 0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6]) - (factor * factor * factor) / 2.0 * R[5] * R[5] * R[5] + (1.5 * factor * factor * factor * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[5]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + ((-(0.8333333134651184 * pow(factor,4.0) * R[0] * R[5] * R[5])) + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * R2[0] * R2[0] + (0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + ((-((factor * factor * factor) / 2.0 * R[5] * R[5])) + 0.1666666716337204 * factor * factor * factor * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[0] + factor * factor * R[4] * R[5]) * R2[5] * R2[5] + ((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0) + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - pow(factor,4.0) * R[4] * R[4]) * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0)) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[4] * R2[4] * R2[4] + (((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[4] * R[4]) * R[5]) * R[6]) - 2.1666667461395264 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] - 0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6] - 1.5 * factor * factor * factor * R[4] * R[5] * R[5] + (factor * factor * factor) / 2.0 * R[4] * R[4] * R[4]) - 0.1666666716337204 * factor * factor * factor * R[0] * R[0] * R[4]) * R2[4] * R2[4] + (((((0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4]) * R[6] * R[6] - 2.0 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[6] + 0.1666666716337204 * pow(factor,4.0) * pow(R[5],4.0)) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * pow(R[4],4.0) + 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4] * R[4]) * R2[0] * R2[0] + ((-(1.3333333730697632 * factor * factor * factor * R[4] * R[5] * R[6])) - 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[5] + 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[4]) * R2[0]) - factor * factor * R[5] * R[5] + factor * factor * R[4] * R[4]) * R2[4] + ((0.1666666716337204 * pow(factor,4.0) * R[5] * R[6] * R[6] * R[6] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0]) * R[5]) * R[6]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] * R[4]) * R2[0] * R2[0] * R2[0] + ((-(0.1666666716337204 * factor * factor * factor * R[4] * R[6] * R[6])) - 1.3333333730697632 * factor * factor * factor * R[0] * R[5] * R[6] - 0.1666666716337204 * factor * factor * factor * R[4] * R[5] * R[5] - 0.1666666716337204 * factor * factor * factor * R[4] * R[4] * R[4] + (factor * factor * factor) / 2.0 * R[0] * R[0] * R[4]) * R2[0] * R2[0] + (factor * factor * R[0] * R[4] - factor * factor * R[5] * R[6]) * R2[0] + factor * R[4]) * R2[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) * R[5]) * pow(R2[4],4.0) + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] - 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4]) * R[5]) * R2[0] + 0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[0] * R[0] - (factor * factor * factor) / 2.0 * R[4] * R[4]) * R[5]) * R2[4] * R2[4] * R2[4] + (((0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[6] * R[6] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[4] * R[4] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4] - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[5]) * R2[0] * R2[0] + ((0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + (0.1666666716337204 * factor * factor * factor * R[5] * R[5] - (factor * factor * factor) / 2.0 * R[4] * R[4] + 0.1666666716337204 * factor * factor * factor * R[0] * R[0]) * R[6]) - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[5]) * R2[0]) - factor * factor * R[4] * R[5]) * R2[4] * R2[4] + (((0.1666666716337204 * pow(factor,4.0) * R[4] * R[6] * R[6] * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[4] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[4] * R[4] * R[4]) - 0.8333333134651184 * pow(factor,4.0) * R[0] * R[0] * R[4]) * R[6] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] * R[5] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4] - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[5]) * R2[0] * R2[0] * R2[0] + (0.1666666716337204 * factor * factor * factor * R[5] * R[6] * R[6] - 1.3333333730697632 * factor * factor * factor * R[0] * R[4] * R[6] + 0.1666666716337204 * factor * factor * factor * R[5] * R[5] * R[5] + (0.1666666716337204 * factor * factor * factor * R[4] * R[4] - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[5]) * R2[0] * R2[0] + ((-(factor * factor * R[4] * R[6])) - factor * factor * R[0] * R[5]) * R2[0]) - factor * R[5]) * R2[4] + (0.1666666716337204 * pow(factor,4.0) * R[0] * R[6] * R[6] * R[6] + ((0.1666666716337204 * pow(factor,4.0) * R[0] * R[5] * R[5] + 0.1666666716337204 * pow(factor,4.0) * R[0] * R[4] * R[4]) - 0.1666666716337204 * pow(factor,4.0) * R[0] * R[0] * R[0]) * R[6]) * pow(R2[0],4.0) + (0.1666666716337204 * factor * factor * factor * R[6] * R[6] * R[6] + ((0.1666666716337204 * factor * factor * factor * R[5] * R[5] + 0.1666666716337204 * factor * factor * factor * R[4] * R[4]) - (factor * factor * factor) / 2.0 * R[0] * R[0]) * R[6]) * R2[0] * R2[0] * R2[0]) - factor * factor * R[0] * R[6] * R2[0] * R2[0] - factor * R[6] * R2[0]; // e2 ^ e3
    finalRes[0] = (-(interpolated[6] * R[6])) - interpolated[5] * R[5] - interpolated[4] * R[4] + interpolated[0] * R[0]; // 1.0
    finalRes[4] = interpolated[5] * R[6] - interpolated[6] * R[5] + interpolated[0] * R[4] + interpolated[4] * R[0]; // e1 ^ e2
    finalRes[5] = (-(interpolated[4] * R[6])) + interpolated[0] * R[5] + interpolated[6] * R[4] + interpolated[5] * R[0]; // e1 ^ e3
    finalRes[6] = (interpolated[0] * R[6] + interpolated[4] * R[5]) - interpolated[5] * R[4] + interpolated[6] * R[0]; // e2 ^ e3
    
    // x: e2 ^ e3
    // y: e1 ^ e3
    // z: e1 ^ e2
    
    Out.w = finalRes[0];
    Out.x = finalRes[6];
    Out.y = -finalRes[5];
    Out.z = finalRes[4];
    
    return Out;
}

void interpolateGA_GAALOP(aiQuaternion& Out, aiRotor src, aiRotor dst, float Factor)
{
    float inner = src.x * dst.x + src.y * dst.y + src.z * dst.z + src.w * dst.w;
    if (inner<0)
    {
        dst = aiRotor(-dst.w, -dst.x,-dst.y,-dst.z);
    }
    
    Out = calculateGA_GAALOP(src, dst, Factor);
}

glm::mat4 rotorToMatrix(const e3ga::rotor R) { // compute images of the basis vectors:
    float M[9];
    e3ga::rotor Ri = _rotor(inverse(R));
    e3ga::vector image[3] = {
        _vector(R * e3ga::e1 * Ri), // image of e1 _vector(R * e2 * Ri), // image of e2
        _vector(R * e3ga::e3 * Ri) // image of e3
    };
    // copy coordinates to matrix:
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            M[j * 3 + i] = image[i].getC(e3ga::vector_e1_e2_e3)[j];
    glm::mat3 x(*M);
    glm::mat4 t(x);
    return t;
}

glm::mat4 interpolateGA_GAIGEN(e3ga::rotor Rsrc, e3ga::rotor Rdest, float Factor, float GAfactorDenominator, glm::quat start)
{
    float inner = Rsrc.m_c[0] * Rdest.m_c[0] + Rsrc.m_c[1] * Rdest.m_c[1] + Rsrc.m_c[2] * Rdest.m_c[2] + Rsrc.m_c[3] * Rdest.m_c[3];
    if (inner<0)
    {
        Rdest.m_c[0] = -Rdest.m_c[0];
        Rdest.m_c[1] = -Rdest.m_c[1];
        Rdest.m_c[2] = -Rdest.m_c[2];
        Rdest.m_c[3] = -Rdest.m_c[3];
    }
    
    e3ga::mv srcMV = e3ga::unit_e(start.w + (start.x*e3ga::e1)+ (start.y*e3ga::e2) + (start.z*e3ga::e3) );
    
    e3ga::rotor RtotQ = Rdest * e3ga::inverse(Rsrc);
    
    e3ga::rotor RiQ = _rotor( e3ga::exp( _bivector(Factor/GAfactorDenominator * e3ga::log(_rotor(RtotQ)) )) );
        e3ga::mv RintQ = RiQ * srcMV * e3ga::inverse(RiQ);
    
    aiQuaternion Out;
    Out.w = e3ga::_float(RintQ);
    Out.x = RintQ.e1();
    Out.y = RintQ.e2();
    Out.z = RintQ.e3();
    glm::quat glmQuat(Out.w, Out.x, Out.y, Out.z);
    
    return glm::mat4_cast(glmQuat);
}

glm::mat4 makeMat4(c3ga::flatPoint imageOfE1NI, c3ga::flatPoint imageOfE2NI, c3ga::flatPoint imageOfE3NI, c3ga::flatPoint imageOfNONI)
{
    glm::mat4 final;
    final[0][0] = imageOfE1NI.m_c[0]; final[0][1] = imageOfE1NI.m_c[1]; final[0][2] = imageOfE1NI.m_c[2]; final[0][3] = imageOfE1NI.m_c[3];
    final[1][0] = imageOfE2NI.m_c[0]; final[1][1] = imageOfE2NI.m_c[1]; final[1][2] = imageOfE2NI.m_c[2]; final[1][3] = imageOfE2NI.m_c[3];
    final[2][0] = imageOfE3NI.m_c[0]; final[2][1] = imageOfE3NI.m_c[1]; final[2][2] = imageOfE3NI.m_c[2]; final[2][3] = imageOfE3NI.m_c[3];
    final[3][0] = imageOfNONI.m_c[0]; final[3][1] = imageOfNONI.m_c[1]; final[3][2] = imageOfNONI.m_c[2]; final[3][3] = imageOfNONI.m_c[3];
    
    return final;
}

#if INTERPOLATION==GA_VERSOR || INTERPOLATION==CGA_VERSOR
glm::mat4 interpolateGAVersor(vsr::cga::Rot srcR, vsr::cga::Rot dstR, float Factor, float GAfactorDenominator)
{
    float inner = srcR.val[1] * dstR.val[1] + srcR.val[2] * dstR.val[2] + srcR.val[3] * dstR.val[3] + srcR.val[0] * dstR.val[0];
    if (inner<0)
    {
        dstR.val[0] = -dstR.val[0];
        dstR.val[1] = -dstR.val[1];
        dstR.val[2] = -dstR.val[2];
        dstR.val[3] = -dstR.val[3];
    }
    
    Rot srcdst = !srcR * dstR;
    
    Rot log =  Gen::log(srcdst);
    
    Rot result = srcR * Gen::mot(log * Factor);
    
    Flp	FlatPoint2 = result * (Vec::x^Inf(1)) * !result;
    Flp	FlatPoint3 = result * (Vec::y^Inf(1)) * !result;
    Flp	FlatPoint4 = result * (Vec::z^Inf(1)) * !result;
    
    glm::mat4 final;
    final[0][0] = FlatPoint2.val[0]; final[0][1] = FlatPoint2.val[1]; final[0][2] = FlatPoint2.val[2];final[0][3] = 0;
    final[1][0] = FlatPoint3.val[0]; final[1][1] = FlatPoint3.val[1]; final[1][2] = FlatPoint3.val[2]; final[1][3] = 0;
    final[2][0] = FlatPoint4.val[0]; final[2][1] = FlatPoint4.val[1]; final[2][2] = FlatPoint4.val[2]; final[2][3] = 0;
    final[3][0] = 0; final[3][1] = 0; final[3][2] =0; final[3][3] = 1;
    
    return final;
}

Mot getInterpolatedMot1Pos2Rot(Drv srcTr, Vec srcAxis, float srcAngle, Vec dstAxis, float dstAngle, float factor)
{
    Trs srcT=Gen::trs(srcTr);
    
    Line lin1 = Vec(0,0,0).null() ^ srcAxis.null() ^ Inf(1);
    Biv dll1 = lin1.dual()/lin1.dual().norm();
    Rot srcR = Gen::rot(dll1*srcAngle/2.0);
    
    Line lin2 = Vec(0,0,0).null() ^ dstAxis.null() ^ Inf(1);
    Biv dll2 = lin2.dual()/lin2.dual().norm();
    Rot dstR = Gen::rot(dll2*dstAngle/2.0);
    
    Mot	mot = srcR;
    
    Mot	mot2 =  dstR;
    
    Mot srcdst = !mot * mot2;
    
    Mot log =  Gen::log(srcdst);
    
    Mot mot3 = srcT * mot * Gen::mot(log * factor);
    
    return mot3;
}

vsr::cga::Mot interpolateCGAVersor11(glm::vec3 translation1, vsr::cga::Rot srcQ)
{
    const Drv srcTr(translation1.x, translation1.y, translation1.z);
    Trs srcT=Gen::trs(srcTr);
    
    return srcT*srcQ;
}

vsr::cga::Mot interpolateCGAVersor1Pos2Rot(glm::vec3 translation1, vsr::cga::Rot srcR, vsr::cga::Rot dstR, float Factor, float GAfactorDenominator)
{
    
    float inner = srcR.val[1] * dstR.val[1] + srcR.val[2] * dstR.val[2] + srcR.val[3] * dstR.val[3] + srcR.val[0] * dstR.val[0];
    if (inner<0)
    {
        dstR.val[0] = -dstR.val[0];
        dstR.val[1] = -dstR.val[1];
        dstR.val[2] = -dstR.val[2];
        dstR.val[3] = -dstR.val[3];
    }
    
    const Drv srcTr(translation1.x, translation1.y, translation1.z);
    
    Trs srcT=Gen::trs(srcTr);
    
    Mot	mot = srcR;
    
    Mot	mot2 =  dstR;
    
    Mot srcdst = !mot * mot2;
    
    Mot log =  Gen::log(srcdst);
    
    return srcT * mot * Gen::mot(log * Factor);
}

vsr::cga::Mot interpolateCGAVersor(glm::vec3 translation1, glm::vec3 translation2, vsr::cga::Rot srcR, vsr::cga::Rot dstR, float Factor, float GAfactorDenominator)
{
    float inner = srcR.val[1] * dstR.val[1] + srcR.val[2] * dstR.val[2] + srcR.val[3] * dstR.val[3] + srcR.val[0] * dstR.val[0];
    if (inner<0)
    {
        dstR.val[0] = -dstR.val[0];
        dstR.val[1] = -dstR.val[1];
        dstR.val[2] = -dstR.val[2];
        dstR.val[3] = -dstR.val[3];
    }
    
    const Drv srcTr(translation1.x, translation1.y, translation1.z);
    Drv dstTr(translation2.x, translation2.y, translation2.z);
    
    Trs srcT=Gen::trs(srcTr);
    Trs dstT=Gen::trs(dstTr);
    
    Mot	mot = srcT * srcR;
    
    Mot	mot2 = dstT * dstR;
    
    Mot srcdst = !mot * mot2;
    
    Mot log =  Gen::log(srcdst);
    
    Mot mot3 = mot * Gen::mot(log * Factor);
    
    return mot3;
}

vsr::cga::Mot interpolateCGAVersor1Rot(glm::vec3 translation1, glm::vec3 translation2, vsr::cga::Rot srcR, float Factor, float GAfactorDenominator)
{
    const Drv srcTr(translation1.x, translation1.y, translation1.z);
    Drv dstTr(translation2.x, translation2.y, translation2.z);
    
    Trs srcT=Gen::trs(srcTr);
    Trs dstT=Gen::trs(dstTr);
    
    Mot	mot = srcT;
    
    Mot	mot2 = dstT;
    
    Mot srcdst = !mot * mot2;
    
    Mot log =  Gen::log(srcdst);
    
    Mot mot3 = srcR * mot * Gen::mot(log * Factor);
    
    return mot3;
    
}

glm::mat4 getMat4Versor(Mot result)
{
    Flp	FlatPoint2 = result * (Vec::x^Inf(1)) * !result;
    Flp	FlatPoint3 = result * (Vec::y^Inf(1)) * !result;
    Flp	FlatPoint4 = result * (Vec::z^Inf(1)) * !result;
    Flp	FlatPoint = result * (Ori(1)^Inf(1)) * !result;
    
    glm::mat4 final;
    final[0][0] = FlatPoint2.val[0]; final[0][1] = FlatPoint2.val[1]; final[0][2] = FlatPoint2.val[2];final[0][3] = 0;
    final[1][0] = FlatPoint3.val[0]; final[1][1] = FlatPoint3.val[1]; final[1][2] = FlatPoint3.val[2]; final[1][3] = 0;
    final[2][0] = FlatPoint4.val[0]; final[2][1] = FlatPoint4.val[1]; final[2][2] = FlatPoint4.val[2]; final[2][3] = 0;
    final[3][0] = FlatPoint.val[0]; final[3][1] = FlatPoint.val[1]; final[3][2] = FlatPoint.val[2]; final[3][3] = 1;
    
    return final;
}
#endif

c3ga::TRSversor interpolateCGA2Trs1Rot(glm::vec3 translation1, glm::vec3 translation2, c3ga::rotor srcQ, float Factor, float GAfactorDenominator)
{
    c3ga::vectorE3GA t = _vectorE3GA(translation1.x * c3ga::e1 + translation1.y * c3ga::e2 + translation1.z * c3ga::e3);
    c3ga::normalizedTranslator T2C = c3ga::exp(_freeVector(-0.5f * (t ^ c3ga::ni)));
    c3ga::TRversor TRC = _TRversor(T2C*srcQ);
    
    c3ga::vectorE3GA t2 = _vectorE3GA((translation2.x) * c3ga::e1 + (translation2.y) * c3ga::e2 + (translation2.z) * c3ga::e3);
    c3ga::normalizedTranslator T2D = c3ga::exp(_freeVector(-0.5f * (t2 ^ c3ga::ni)));
    c3ga::TRversor TRD = _TRversor(T2D);
    
    return _TRSversor(TRC * exp(_dualLine(Factor/GAfactorDenominator * log(_TRSversor(inverse(TRC) * TRD)))));
}

c3ga::TRSversor interpolateCGA1Trs2Rot(glm::vec3 translation1, c3ga::rotor srcQ, c3ga::rotor destQ, float Factor, float GAfactorDenominator)
{
    float inner = srcQ.e1e2() * destQ.e1e2() + srcQ.e2e3() * destQ.e2e3() + srcQ.e3e1() * destQ.e3e1() + c3ga::_float(srcQ) * c3ga::_float(destQ);
    if (inner<0)
    {
        destQ.m_c[0] = -destQ.m_c[0];
        destQ.m_c[1] = -destQ.m_c[1];
        destQ.m_c[2] = -destQ.m_c[2];
        destQ.m_c[3] = -destQ.m_c[3];
    }
    
    c3ga::vectorE3GA t = _vectorE3GA(translation1.x * c3ga::e1 + translation1.y * c3ga::e2 + translation1.z * c3ga::e3);
    c3ga::normalizedTranslator T2C = c3ga::exp(_freeVector(-0.5f * (t ^ c3ga::ni)));
    c3ga::TRversor TRC = _TRversor(srcQ);
    
    c3ga::TRversor TRD = _TRversor(destQ);
    
    return _TRSversor(T2C* TRC * exp(_dualLine(Factor/GAfactorDenominator * log(_TRSversor(inverse(TRC) * TRD)))));
}

c3ga::TRSversor interpolateCGA(glm::vec3 translation1, glm::vec3 translation2, c3ga::rotor srcQ, c3ga::rotor destQ, float Factor, float GAfactorDenominator)
{
    float inner = srcQ.e1e2() * destQ.e1e2() + srcQ.e2e3() * destQ.e2e3() + srcQ.e3e1() * destQ.e3e1() + c3ga::_float(srcQ) * c3ga::_float(destQ);
    if (inner<0)
    {
        destQ.m_c[0] = -destQ.m_c[0];
        destQ.m_c[1] = -destQ.m_c[1];
        destQ.m_c[2] = -destQ.m_c[2];
        destQ.m_c[3] = -destQ.m_c[3];
    }
    
    c3ga::vectorE3GA t = _vectorE3GA(translation1.x * c3ga::e1 + translation1.y * c3ga::e2 + translation1.z * c3ga::e3);
    c3ga::normalizedTranslator T2C = c3ga::exp(_freeVector(-0.5f * (t ^ c3ga::ni)));
    c3ga::TRversor TRC = _TRversor(T2C * srcQ);
    
    c3ga::vectorE3GA t2 = _vectorE3GA((translation2.x) * c3ga::e1 + (translation2.y) * c3ga::e2 + (translation2.z) * c3ga::e3);
    c3ga::normalizedTranslator T2D = c3ga::exp(_freeVector(-0.5f * (t2 ^ c3ga::ni)));
    c3ga::TRversor TRD = _TRversor(T2D *  destQ);
    
    return _TRSversor(TRC * exp(_dualLine(Factor/GAfactorDenominator * log(_TRSversor(inverse(TRC) * TRD)))));
}

c3ga::TRversor trRotGaigen(glm::vec3 translation, c3ga::rotor TRC)
{
    c3ga::vectorE3GA tVector = _vectorE3GA(translation.x * c3ga::e1 + translation.y * c3ga::e2 + translation.z * c3ga::e3);
    c3ga::normalizedTranslator finalTrans = c3ga::exp(_freeVector(-0.5f * (tVector ^ c3ga::ni)));
    
    return _TRversor(finalTrans * TRC);
}

glm::mat4 rotorToMat4(e3ga::mv rotor)
{
    glm::quat quat(e3ga::_float(rotor), rotor.e1e2(), rotor.e3e1(), rotor.e2e3());
    return glm::mat4_cast(quat);
}

e3ga::mv getRotor(glm::quat srcQ, glm::quat destQ)
{
    float angleSrc;
    glm::vec3 axisSrc;
    angleSrc = glm::degrees(glm::angle(srcQ));
    axisSrc = glm::axis(srcQ);
    
    float angleDest;
    glm::vec3 axisDest;
    angleDest = glm::angle(destQ);
    axisDest = glm::axis(destQ);
    
    e3ga::mv u = e3ga::unit_e(axisSrc.x*e3ga::e1+axisSrc.y*e3ga::e2+axisSrc.z*e3ga::e3);
    e3ga::rotor Rsrc = _rotor( e3ga::exp( _bivector(glm::radians(angleSrc)/2.0 * (-e3ga::I3 * (u) )) ));
    
    e3ga::mv v = e3ga::unit_e(axisDest.x*e3ga::e1+axisDest.y*e3ga::e2+axisDest.z*e3ga::e3);
    e3ga::rotor Rdest = _rotor( e3ga::exp( _bivector(glm::radians(angleDest)/2 * (-e3ga::I3 * (v) ))) );
    
    e3ga::mv RtotQ = Rdest * e3ga::inverse(Rsrc);
    
    return _rotor( e3ga::exp( _bivector(0.5 * e3ga::log(_rotor(RtotQ)) )) );
}

void rotateCoordinateSystem(e3ga::mv rotor, e3ga::mv &newe1, e3ga::mv &newe2, e3ga::mv &newe3)
{
    newe1 = rotor * e3ga::e1 * e3ga::inverse(rotor);
    newe2 = rotor * e3ga::e2 * e3ga::inverse(rotor);
    newe3 = rotor * e3ga::e3 * e3ga::inverse(rotor);
}

void rotateX(float angle, int currentRot, e3ga::mv &rotor, e3ga::mv newe1,  e3ga::mv newe2,  e3ga::mv newe3, glm::mat4 &finalRotation)
{
    if (currentRot != ROTATIONX)
    {
        currentRot = ROTATIONX;
        rotateCoordinateSystem(rotor, newe1, newe2, newe3);
    }
    
    e3ga::mv Rsrc = _rotor( e3ga::exp(newe1 ^ newe2 * (glm::radians(angle)/2.0)));
    
    rotor = Rsrc * rotor;
    
    finalRotation = rotorToMat4(rotor);
}

void rotateY(float angle, int currentRot, e3ga::mv &rotor, e3ga::mv newe1,  e3ga::mv newe2,  e3ga::mv newe3, glm::mat4 &finalRotation)
{
    if (currentRot != ROTATIONY)
    {
        currentRot = ROTATIONY;
        rotateCoordinateSystem(rotor, newe1, newe2, newe3);
    }
    
    e3ga::mv Rsrc = _rotor( e3ga::exp(newe3 ^ newe1 * (glm::radians(angle)/2.0)));
    
    rotor = Rsrc * rotor;
    
    finalRotation = rotorToMat4(rotor);
}

void rotateZ(float angle, int currentRot, e3ga::mv &rotor, e3ga::mv newe1,  e3ga::mv newe2,  e3ga::mv newe3, glm::mat4 &finalRotation)
{
    if (currentRot != ROTATIONZ)
    {
        currentRot = ROTATIONZ;
        rotateCoordinateSystem(rotor, newe1, newe2, newe3);
    }
    
    e3ga::mv Rsrc = _rotor( e3ga::exp(newe3 ^ newe2 * (glm::radians(angle)/2.0)));
    
    rotor = Rsrc * rotor;
    
    finalRotation = rotorToMat4(rotor);
}

#endif

glm::mat4 RotorDefToMat4(RotorDef finalR)
{
    glm::mat4 rotationMatrix;
    float x[32]; float y[32]; float z[32]; float t[32];
    
    x[8] = (-(((finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2) - finalR.e2e3 * finalR.e2e3 - finalR.scalar * finalR.scalar) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e1 ^ einf
    x[11] = (-((2.0 * finalR.e2e3 * finalR.e1e3 + 2.0 * finalR.scalar * finalR.e1e2) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e2 ^ einf
    x[13] = (-((2.0 * finalR.scalar * finalR.e1e3 - 2.0 * finalR.e2e3 * finalR.e1e2) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e3 ^ einf
    
    y[8] = (-((2.0 * finalR.e2e3 * finalR.e1e3 - 2.0 * finalR.scalar * finalR.e1e2) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e1 ^ einf
    y[11] = (finalR.e1e3 * finalR.e1e3 - finalR.e1e2 * finalR.e1e2 - finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar); // e2 ^ einf
    y[13] = (-((2.0 * finalR.e1e2 * finalR.e1e3 + 2.0 * finalR.scalar * finalR.e2e3) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e3 ^ einf
    
    z[8] = (2.0 * finalR.scalar * finalR.e1e3 + 2.0 * finalR.e2e3 * finalR.e1e2) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar); // e1 ^ einf
    z[11] = (-((2.0 * finalR.e1e2 * finalR.e1e3 - 2.0 * finalR.scalar * finalR.e2e3) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e2 ^ einf
    z[13] = (-(((finalR.e1e3 * finalR.e1e3 - finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3) - finalR.scalar * finalR.scalar) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e3 ^ einf
    
    t[8] = (-((2.0 * finalR.scalar * finalR.e1einf + 2.0 * finalR.e3einf * finalR.e1e3 + 2.0 * finalR.e2einf * finalR.e1e2 + 2.0 * finalR.e2e3 * finalR.e2e3einf) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar))); // e1 ^ einf
    t[11] = ((2.0 * finalR.e1e2 * finalR.e1einf + 2.0 * finalR.e2e3einf * finalR.e1e3) - 2.0 * finalR.e2e3 * finalR.e3einf - 2.0 * finalR.scalar * finalR.e2einf) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar); // e2 ^ einf
    t[13] = (2.0 * finalR.e1e3 * finalR.e1einf - 2.0 * finalR.e2e3einf * finalR.e1e2 - 2.0 * finalR.scalar * finalR.e3einf + 2.0 * finalR.e2e3 * finalR.e2einf) / (finalR.e1e3 * finalR.e1e3 + finalR.e1e2 * finalR.e1e2 + finalR.e2e3 * finalR.e2e3 + finalR.scalar * finalR.scalar); // e3 ^ einf
    
    rotationMatrix[0][0]=x[8];
    rotationMatrix[0][1]=x[11];
    rotationMatrix[0][2]=x[13];
    rotationMatrix[0][3]=0;
    
    rotationMatrix[1][0]=y[8];
    rotationMatrix[1][1]=y[11];
    rotationMatrix[1][2]=y[13];
    rotationMatrix[1][3]=0;
    
    rotationMatrix[2][0]=z[8];
    rotationMatrix[2][1]=z[11];
    rotationMatrix[2][2]=z[13];
    rotationMatrix[2][3]=0;
    
    rotationMatrix[3][0]=t[8];
    rotationMatrix[3][1]=t[11];
    rotationMatrix[3][2]=t[13];
    rotationMatrix[3][3]=1;
    
    return rotationMatrix;
}

glm::vec3 transformPoint(RotorDef finalR, float x1, float y1, float z1)
{
    float x = (finalR.scalar * x1 + finalR.e1e2 * y1 + finalR.e1e3 * z1 + (-finalR.e1einf)) * finalR.scalar / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (-((finalR.scalar * y1 + (-(finalR.e1e2 * x1)) + finalR.e2e3 * z1 + (-finalR.e2einf)) * (-finalR.e1e2) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + (-((finalR.scalar * z1 + (-(finalR.e1e3 * x1)) + (-(finalR.e2e3 * y1)) + (-finalR.e3einf)) * (-finalR.e1e3) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + finalR.scalar * (-finalR.e1einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (-((finalR.e1e2 * z1 + (-(finalR.e1e3 * y1)) + finalR.e2e3 * x1 + (-finalR.e2e3einf)) * (-finalR.e2e3) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + finalR.e1e2 * (-finalR.e2einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + finalR.e1e3 * (-finalR.e3einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (-(finalR.e2e3 * finalR.e2e3einf / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))); // e1
    float y = (finalR.scalar * x1 + finalR.e1e2 * y1 + finalR.e1e3 * z1 + (-finalR.e1einf)) * (-finalR.e1e2) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (finalR.scalar * y1 + (-(finalR.e1e2 * x1)) + finalR.e2e3 * z1 + (-finalR.e2einf)) * finalR.scalar / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (-((finalR.scalar * z1 + (-(finalR.e1e3 * x1)) + (-(finalR.e2e3 * y1)) + (-finalR.e3einf)) * (-finalR.e2e3) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + finalR.scalar * (-finalR.e2einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (finalR.e1e2 * z1 + (-(finalR.e1e3 * y1)) + finalR.e2e3 * x1 + (-finalR.e2e3einf)) * (-finalR.e1e3) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (-(finalR.e1e2 * (-finalR.e1einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + finalR.e1e3 * finalR.e2e3einf / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + finalR.e2e3 * (-finalR.e3einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))); // e2
    float z = (finalR.scalar * x1 + finalR.e1e2 * y1 + finalR.e1e3 * z1 + (-finalR.e1einf)) * (-finalR.e1e3) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (finalR.scalar * y1 + (-(finalR.e1e2 * x1)) + finalR.e2e3 * z1 + (-finalR.e2einf)) * (-finalR.e2e3) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (finalR.scalar * z1 + (-(finalR.e1e3 * x1)) + (-(finalR.e2e3 * y1)) + (-finalR.e3einf)) * finalR.scalar / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + finalR.scalar * (-finalR.e3einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))) + (-((finalR.e1e2 * z1 + (-(finalR.e1e3 * y1)) + finalR.e2e3 * x1 + (-finalR.e2e3einf)) * (-finalR.e1e2) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + (-(finalR.e1e2 * finalR.e2e3einf / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + (-(finalR.e1e3 * (-finalR.e1einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))) + (-(finalR.e2e3 * (-finalR.e2einf) / (finalR.scalar * finalR.scalar + (-(finalR.e1e2 * (-finalR.e1e2))) + (-(finalR.e1e3 * (-finalR.e1e3))) + (-(finalR.e2e3 * (-finalR.e2e3)))))); // e3
    
    return glm::vec3(x, y, z);
}

glm::mat4 GAALOPVersorToMat4Scale(float* motor)
{
    glm::mat4 rotationMatrix;
    float x[32]; float y[32]; float z[32]; float t[32];
    
    x[8] = (motor[0] + (-motor[15])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-(((-motor[6]) + motor[28]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[6]) + motor[28]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[7]) + motor[29]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[7]) + motor[29]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[10] + (-motor[30])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[10] + (-motor[30])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e1 ^ einf
    x[11] = (motor[0] + (-motor[15])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[6]) + motor[28]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[6]) + motor[28]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-(((-motor[7]) + motor[29]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[7]) + motor[29]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (motor[10] + (-motor[30])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e2 ^ einf
    x[13] = (motor[0] + (-motor[15])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[6]) + motor[28]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[6]) + motor[28]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[7]) + motor[29]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[7]) + motor[29]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[10] + (-motor[30])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[10] + (-motor[30])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e3 ^ einf
    x[26] = (motor[0] + (-motor[15])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-(((-motor[6]) + motor[28]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[6]) + motor[28]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + ((-motor[7]) + motor[29]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[7]) + motor[29]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e1 ^ (e2 ^ (e3 ^ einf))
    y[8] = (motor[6] + (-motor[28])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[0] + (-motor[15])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[0] + (-motor[15])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[10]) + motor[30]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[10]) + motor[30]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[7]) + motor[29]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[7]) + motor[29]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e1 ^ einf
    y[11] = (motor[6] + (-motor[28])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-(((-motor[10]) + motor[30]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[10]) + motor[30]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + ((-motor[7]) + motor[29]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[7]) + motor[29]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e2 ^ einf
    y[13] = (motor[6] + (-motor[28])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[10]) + motor[30]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[10]) + motor[30]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-(((-motor[7]) + motor[29]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-(((-motor[7]) + motor[29]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e3 ^ einf
    y[26] = (motor[6] + (-motor[28])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[0] + (-motor[15])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[0] + (-motor[15])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + ((-motor[10]) + motor[30]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[10]) + motor[30]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[7]) + motor[29]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + ((-motor[7]) + motor[29]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e1 ^ (e2 ^ (e3 ^ einf))
    z[8] = (motor[7] + (-motor[29])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[7] + (-motor[29])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[10] + (-motor[30])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[10] + (-motor[30])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[0] + (-motor[15])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[0] + (-motor[15])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[6] + (-motor[28])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[6] + (-motor[28])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e1 ^ einf
    z[11] = (motor[7] + (-motor[29])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[7] + (-motor[29])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[0] + (-motor[15])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[0] + (-motor[15])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (motor[6] + (-motor[28])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e2 ^ einf
    z[13] = (motor[7] + (-motor[29])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[7] + (-motor[29])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[10] + (-motor[30])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[6] + (-motor[28])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[6] + (-motor[28])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e3 ^ einf
    z[26] = (motor[7] + (-motor[29])) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[7] + (-motor[29])) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((motor[10] + (-motor[30])) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((motor[10] + (-motor[30])) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (motor[0] + (-motor[15])) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[0] + (-motor[15])) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (motor[6] + (-motor[28])) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e1 ^ (e2 ^ (e3 ^ einf))
    t[0] = (-motor[15]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[28]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[29]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[30]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[0]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[6]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[7]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[10]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // 1.0
    t[6] = (-motor[15]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[28]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[29]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[30]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[0]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[6]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[7]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[10]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e1 ^ e2
    t[7] = (-motor[15]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[28]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[29]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[30]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[0]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[6]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[7]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[10]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e1 ^ e3
    t[8] = (-motor[15]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[28]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[29]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[8]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[8]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[30]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[11]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[11]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[13]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[13]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[0]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[26]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[26]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[6]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[7]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[10]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e1 ^ einf
    t[10] = (-motor[15]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[28]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[29]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[30]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[0]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[6]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[7]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[10]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e2 ^ e3
    t[11] = (-motor[15]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[28]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[29]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[8]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[8]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[30]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[11]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[11]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[13]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[13]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[0]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[26]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[26]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[6]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[7]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[10]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e2 ^ einf
    t[13] = (-motor[15]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[28]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[29]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[8]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[8]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[30]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[11]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[11]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[13]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[13]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[0]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[26]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[26]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[6]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[7]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[10]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e3 ^ einf
    t[15] = (-motor[15]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[28]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[29]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[30]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[0]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[6]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[7]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[10]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // einf ^ e0
    t[26] = (-motor[15]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[28]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[29]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[8]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[8]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[30]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[11]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-((-motor[11]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[13]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[13]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[0]) * motor[26] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[26]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[26]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[6]) * (-motor[13]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[7]) * (-motor[11]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[10]) * (-motor[8]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e1 ^ (e2 ^ (e3 ^ einf))
    t[28] = (-motor[15]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[28]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[29]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[30]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[0]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[6]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[7]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[10]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e1 ^ (e2 ^ (einf ^ e0))
    t[29] = (-motor[15]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[28]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[29]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[30]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[0]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[6]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[7]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[10]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))); // e1 ^ (e3 ^ (einf ^ e0))
    t[30] = (-motor[15]) * motor[30] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[28]) * motor[29] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[29]) * motor[28] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[30]) * (-motor[15]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[0]) * (-motor[10]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-((-motor[6]) * (-motor[7]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))))) + (-motor[7]) * (-motor[6]) / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))) + (-motor[10]) * motor[0] / (motor[0] * motor[0] + (-(motor[6] * (-motor[6]))) + (-(motor[7] * (-motor[7]))) + (-(motor[10] * (-motor[10]))) + motor[15] * (-motor[15]) + (-(motor[28] * motor[28])) + (-(motor[29] * motor[29])) + (-(motor[30] * motor[30]))); // e2 ^ (e3 ^ (einf ^ e0))
    rotationMatrix[0][0]=x[8];
    rotationMatrix[0][1]=x[11];
    rotationMatrix[0][2]=x[13];
    rotationMatrix[0][3]=0;
    
    rotationMatrix[1][0]=y[8];
    rotationMatrix[1][1]=y[11];
    rotationMatrix[1][2]=y[13];
    rotationMatrix[1][3]=0;
    
    rotationMatrix[2][0]=z[8];
    rotationMatrix[2][1]=z[11];
    rotationMatrix[2][2]=z[13];
    rotationMatrix[2][3]=0;
    
    rotationMatrix[3][0]=t[8];
    rotationMatrix[3][1]=t[11];
    rotationMatrix[3][2]=t[13];
    rotationMatrix[3][3]=1;
    
    return rotationMatrix;
}

glm::mat4 GAALOPVersorToMat4(float* finalR)
{
    glm::mat4 rotationMatrix;
    float x[32]; float y[32]; float z[32]; float t[32];
    
    x[8] = (-(((finalR[7] * finalR[7] + finalR[6] * finalR[6]) - finalR[10] * finalR[10] - finalR[0] * finalR[0]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e1 ^ einf
    x[11] = (-((2.0 * finalR[10] * finalR[7] + 2.0 * finalR[0] * finalR[6]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e2 ^ einf
    x[13] = (-((2.0 * finalR[0] * finalR[7] - 2.0 * finalR[10] * finalR[6]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e3 ^ einf
    
    y[8] = (-((2.0 * finalR[10] * finalR[7] - 2.0 * finalR[0] * finalR[6]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e1 ^ einf
    y[11] = (finalR[7] * finalR[7] - finalR[6] * finalR[6] - finalR[10] * finalR[10] + finalR[0] * finalR[0]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]); // e2 ^ einf
    y[13] = (-((2.0 * finalR[6] * finalR[7] + 2.0 * finalR[0] * finalR[10]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e3 ^ einf
    
    z[8] = (2.0 * finalR[0] * finalR[7] + 2.0 * finalR[10] * finalR[6]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]); // e1 ^ einf
    z[11] = (-((2.0 * finalR[6] * finalR[7] - 2.0 * finalR[0] * finalR[10]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e2 ^ einf
    z[13] = (-(((finalR[7] * finalR[7] - finalR[6] * finalR[6] + finalR[10] * finalR[10]) - finalR[0] * finalR[0]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e3 ^ einf
    
    t[8] = (-((2.0 * finalR[0] * finalR[8] + 2.0 * finalR[13] * finalR[7] + 2.0 * finalR[11] * finalR[6] + 2.0 * finalR[10] * finalR[26]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]))); // e1 ^ einf
    t[11] = ((2.0 * finalR[6] * finalR[8] + 2.0 * finalR[26] * finalR[7]) - 2.0 * finalR[10] * finalR[13] - 2.0 * finalR[0] * finalR[11]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]); // e2 ^ einf
    t[13] = (2.0 * finalR[7] * finalR[8] - 2.0 * finalR[26] * finalR[6] - 2.0 * finalR[0] * finalR[13] + 2.0 * finalR[10] * finalR[11]) / (finalR[7] * finalR[7] + finalR[6] * finalR[6] + finalR[10] * finalR[10] + finalR[0] * finalR[0]); // e3 ^ einf
    
    rotationMatrix[0][0]=x[8];
    rotationMatrix[0][1]=x[11];
    rotationMatrix[0][2]=x[13];
    rotationMatrix[0][3]=0;
    
    rotationMatrix[1][0]=y[8];
    rotationMatrix[1][1]=y[11];
    rotationMatrix[1][2]=y[13];
    rotationMatrix[1][3]=0;
    
    rotationMatrix[2][0]=z[8];
    rotationMatrix[2][1]=z[11];
    rotationMatrix[2][2]=z[13];
    rotationMatrix[2][3]=0;
    
    rotationMatrix[3][0]=t[8];
    rotationMatrix[3][1]=t[11];
    rotationMatrix[3][2]=t[13];
    rotationMatrix[3][3]=1;
    
    return rotationMatrix;
}

RotorDef TrRotToVersor(glm::vec3 translation1, aiRotor srcQ)
{
    float translatornew[32], R[32];
    
    translatornew[0] = 1.0; // 1.0
    translatornew[8] = (-(translation1.x / 2.0)); // e1 ^ einf
    translatornew[11] = (-(translation1.y / 2.0)); // e2 ^ einf
    translatornew[13] = (-(translation1.z / 2.0)); // e3 ^ einf
    
    R[0] = srcQ.w;
    R[6] = srcQ.x;
    R[7] = srcQ.y;
    R[10] = srcQ.z;
    
    float scalar = R[0]; // 1.0
    float e1e2 = R[6]; // e1 ^ e2
    float e1e3 = R[7]; // e1 ^ e3
    float e1einf = translatornew[8] * R[0] + (-(translatornew[11] * R[6])) + (-(translatornew[13] * R[7])); // e1 ^ einf
    float e2e3 = R[10]; // e2 ^ e3
    float e2einf = translatornew[8] * R[6] + translatornew[11] * R[0] + (-(translatornew[13] * R[10])); // e2 ^ einf
    float e3einf = translatornew[8] * R[7] + translatornew[11] * R[10] + translatornew[13] * R[0]; // e3 ^ einf
    float e2e3einf = translatornew[8] * R[10] + (-(translatornew[11] * R[7])) + translatornew[13] * R[6]; // e1 ^ (e2 ^ (e3 ^ einf))
    
    return RotorDef(scalar, e1e2, e1e3, e1einf, e2e3, e2einf, e3einf, e2e3einf);
}

RotorDef translationInterpolateRotationCGA_GAALOP(glm::vec3 translation1, aiRotor src, aiRotor dst, float factor)
{
    float inner = src.x * dst.x + src.y * dst.y + src.z * dst.z + src.w * dst.w;
    if (inner<0)
    {
        dst = aiRotor(-dst.w, -dst.x,-dst.y,-dst.z);
    }
    
    float translatornew[14];
    float R[11];
    float R2[11];
    float RtotQ[11];
    float interpolated[11];
    float finalRot[11];
    
    R[0] = src.w;
    R[6] = src.x;
    R[7] = src.y;
    R[10] = src.z;
    
    R2[0] = dst.w;
    R2[6] = dst.x;
    R2[7] = dst.y;
    R2[10] = dst.z;
    
    translatornew[0] = 1.0; // 1.0
    translatornew[8] = (-(translation1.x / 2.0)); // e1 ^ einf
    translatornew[11] = (-(translation1.y / 2.0)); // e2 ^ einf
    translatornew[13] = (-(translation1.z / 2.0)); // e3 ^ einf
    RtotQ[0] = R[0] * R2[0] + (-((-R[6]) * R2[6])) + (-((-R[7]) * R2[7])) + (-((-R[10]) * R2[10])); // 1.0
    RtotQ[6] = R[0] * R2[6] + (-R[6]) * R2[0] + (-((-R[7]) * R2[10])) + (-R[10]) * R2[7]; // e1 ^ e2
    RtotQ[7] = R[0] * R2[7] + (-R[6]) * R2[10] + (-R[7]) * R2[0] + (-((-R[10]) * R2[6])); // e1 ^ e3
    RtotQ[10] = R[0] * R2[10] + (-((-R[6]) * R2[7])) + (-R[7]) * R2[6] + (-R[10]) * R2[0]; // e2 ^ e3
    interpolated[0] = 1.0 + factor * RtotQ[0] + (factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) / 2.0 + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[6])) + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[7])) + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[10]))) * 0.16666666666666666 + (((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[6])) + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[7])) + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[10]))) * factor * RtotQ[0] + (-(((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[10])) + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[7]) * factor * RtotQ[6])) + (-(((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[7] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[10] + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[6]))) * factor * RtotQ[7])) + (-(((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[10] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[7])) + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[0]) * factor * RtotQ[10]))) * 0.041666666666666664; // 1.0
    interpolated[6] = factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) / 2.0 + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[10])) + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[7]) * 0.16666666666666666 + (((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[6])) + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[7])) + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[10]))) * factor * RtotQ[6] + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[10])) + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[7]) * factor * RtotQ[0] + (-(((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[7] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[10] + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[6]))) * factor * RtotQ[10])) + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[10] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[7])) + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[0]) * factor * RtotQ[7]) * 0.041666666666666664; // e1 ^ e2
    interpolated[7] = factor * RtotQ[7] + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) / 2.0 + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[7] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[10] + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[6]))) * 0.16666666666666666 + (((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[6])) + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[7])) + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[10]))) * factor * RtotQ[7] + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[10])) + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[7]) * factor * RtotQ[10] + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[7] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[10] + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[6]))) * factor * RtotQ[0] + (-(((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[10] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[7])) + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[0]) * factor * RtotQ[6]))) * 0.041666666666666664; // e1 ^ e3
    interpolated[10] = factor * RtotQ[10] + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) / 2.0 + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[10] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[7])) + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[0]) * 0.16666666666666666 + (((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[6])) + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[7])) + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[10]))) * factor * RtotQ[10] + (-(((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[10])) + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[7]) * factor * RtotQ[7])) + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[7] + (factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[10] + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[0] + (-((factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[6]))) * factor * RtotQ[6] + ((factor * RtotQ[0] * factor * RtotQ[0] + (-(factor * RtotQ[6] * factor * RtotQ[6])) + (-(factor * RtotQ[7] * factor * RtotQ[7])) + (-(factor * RtotQ[10] * factor * RtotQ[10]))) * factor * RtotQ[10] + (-((factor * RtotQ[0] * factor * RtotQ[6] + factor * RtotQ[6] * factor * RtotQ[0] + (-(factor * RtotQ[7] * factor * RtotQ[10])) + factor * RtotQ[10] * factor * RtotQ[7]) * factor * RtotQ[7])) + (factor * RtotQ[0] * factor * RtotQ[7] + factor * RtotQ[6] * factor * RtotQ[10] + factor * RtotQ[7] * factor * RtotQ[0] + (-(factor * RtotQ[10] * factor * RtotQ[6]))) * factor * RtotQ[6] + (factor * RtotQ[0] * factor * RtotQ[10] + (-(factor * RtotQ[6] * factor * RtotQ[7])) + factor * RtotQ[7] * factor * RtotQ[6] + factor * RtotQ[10] * factor * RtotQ[0]) * factor * RtotQ[0]) * factor * RtotQ[0]) * 0.041666666666666664; // e2 ^ e3
    finalRot[0] = R[0] * interpolated[0] + (-(R[6] * interpolated[6])) + (-(R[7] * interpolated[7])) + (-(R[10] * interpolated[10])); // 1.0
    finalRot[6] = R[0] * interpolated[6] + R[6] * interpolated[0] + (-(R[7] * interpolated[10])) + R[10] * interpolated[7]; // e1 ^ e2
    finalRot[7] = R[0] * interpolated[7] + R[6] * interpolated[10] + R[7] * interpolated[0] + (-(R[10] * interpolated[6])); // e1 ^ e3
    finalRot[10] = R[0] * interpolated[10] + (-(R[6] * interpolated[7])) + R[7] * interpolated[6] + R[10] * interpolated[0]; // e2 ^ e3
    float scalar = finalRot[0]; // 1.0
    float e1e2 = finalRot[6]; // e1 ^ e2
    float e1e3 = finalRot[7]; // e1 ^ e3
    float e1einf = translatornew[8] * finalRot[0] + (-(translatornew[11] * finalRot[6])) + (-(translatornew[13] * finalRot[7])); // e1 ^ einf
    float e2e3 = finalRot[10]; // e2 ^ e3
    float e2einf = translatornew[8] * finalRot[6] + translatornew[11] * finalRot[0] + (-(translatornew[13] * finalRot[10])); // e2 ^ einf
    float e3einf = translatornew[8] * finalRot[7] + translatornew[11] * finalRot[10] + translatornew[13] * finalRot[0]; // e3 ^ einf
    float e2e3einf = translatornew[8] * finalRot[10] + (-(translatornew[11] * finalRot[7])) + translatornew[13] * finalRot[6]; // e1 ^ (e2 ^ (e3 ^ einf))
    
    return RotorDef(scalar, e1e2, e1e3, e1einf, e2e3, e2einf, e3einf, e2e3einf);
}

float* mulVersors(float* motor1, float* motor2)
{
    float* finalmotor = new float[32];
    
    finalmotor[0] = motor1[0] * motor2[0] + (-(motor1[6] * motor2[6])) + (-(motor1[7] * motor2[7])) + (-(motor1[10] * motor2[10])) + motor1[15] * motor2[15] + (-(motor1[28] * motor2[28])) + (-(motor1[29] * motor2[29])) + (-(motor1[30] * motor2[30])); // 1.0
    finalmotor[6] = motor1[0] * motor2[6] + motor1[6] * motor2[0] + (-(motor1[7] * motor2[10])) + motor1[10] * motor2[7] + motor1[15] * motor2[28] + motor1[28] * motor2[15] + (-(motor1[29] * motor2[30])) + motor1[30] * motor2[29]; // e1 ^ e2
    finalmotor[7] = motor1[0] * motor2[7] + motor1[6] * motor2[10] + motor1[7] * motor2[0] + (-(motor1[10] * motor2[6])) + motor1[15] * motor2[29] + motor1[28] * motor2[30] + motor1[29] * motor2[15] + (-(motor1[30] * motor2[28])); // e1 ^ e3
    finalmotor[8] = motor1[0] * motor2[8] + motor1[6] * motor2[11] + motor1[7] * motor2[13] + motor1[8] * motor2[0] + motor1[8] * motor2[15] + (-(motor1[10] * motor2[26])) + (-(motor1[11] * motor2[6])) + (-(motor1[11] * motor2[28])) + (-(motor1[13] * motor2[7])) + (-(motor1[13] * motor2[29])) + (-(motor1[15] * motor2[8])) + (-(motor1[26] * motor2[10])) + (-(motor1[26] * motor2[30])) + (-(motor1[28] * motor2[11])) + (-(motor1[29] * motor2[13])) + motor1[30] * motor2[26]; // e1 ^ einf
    finalmotor[10] = motor1[0] * motor2[10] + (-(motor1[6] * motor2[7])) + motor1[7] * motor2[6] + motor1[10] * motor2[0] + motor1[15] * motor2[30] + (-(motor1[28] * motor2[29])) + motor1[29] * motor2[28] + motor1[30] * motor2[15]; // e2 ^ e3
    finalmotor[11] = motor1[0] * motor2[11] + (-(motor1[6] * motor2[8])) + motor1[7] * motor2[26] + motor1[8] * motor2[6] + motor1[8] * motor2[28] + motor1[10] * motor2[13] + motor1[11] * motor2[0] + motor1[11] * motor2[15] + (-(motor1[13] * motor2[10])) + (-(motor1[13] * motor2[30])) + (-(motor1[15] * motor2[11])) + motor1[26] * motor2[7] + motor1[26] * motor2[29] + motor1[28] * motor2[8] + (-(motor1[29] * motor2[26])) + (-(motor1[30] * motor2[13])); // e2 ^ einf
    finalmotor[13] = motor1[0] * motor2[13] + (-(motor1[6] * motor2[26])) + (-(motor1[7] * motor2[8])) + motor1[8] * motor2[7] + motor1[8] * motor2[29] + (-(motor1[10] * motor2[11])) + motor1[11] * motor2[10] + motor1[11] * motor2[30] + motor1[13] * motor2[0] + motor1[13] * motor2[15] + (-(motor1[15] * motor2[13])) + (-(motor1[26] * motor2[6])) + (-(motor1[26] * motor2[28])) + motor1[28] * motor2[26] + motor1[29] * motor2[8] + motor1[30] * motor2[11]; // e3 ^ einf
    finalmotor[15] = motor1[0] * motor2[15] + (-(motor1[6] * motor2[28])) + (-(motor1[7] * motor2[29])) + (-(motor1[10] * motor2[30])) + motor1[15] * motor2[0] + (-(motor1[28] * motor2[6])) + (-(motor1[29] * motor2[7])) + (-(motor1[30] * motor2[10])); // einf ^ e0
    finalmotor[26] = motor1[0] * motor2[26] + motor1[6] * motor2[13] + (-(motor1[7] * motor2[11])) + motor1[8] * motor2[10] + motor1[8] * motor2[30] + motor1[10] * motor2[8] + (-(motor1[11] * motor2[7])) + (-(motor1[11] * motor2[29])) + motor1[13] * motor2[6] + motor1[13] * motor2[28] + (-(motor1[15] * motor2[26])) + motor1[26] * motor2[0] + motor1[26] * motor2[15] + (-(motor1[28] * motor2[13])) + motor1[29] * motor2[11] + (-(motor1[30] * motor2[8])); // e1 ^ (e2 ^ (e3 ^ einf))
    finalmotor[28] = motor1[0] * motor2[28] + motor1[6] * motor2[15] + (-(motor1[7] * motor2[30])) + motor1[10] * motor2[29] + motor1[15] * motor2[6] + motor1[28] * motor2[0] + (-(motor1[29] * motor2[10])) + motor1[30] * motor2[7]; // e1 ^ (e2 ^ (einf ^ e0))
    finalmotor[29] = motor1[0] * motor2[29] + motor1[6] * motor2[30] + motor1[7] * motor2[15] + (-(motor1[10] * motor2[28])) + motor1[15] * motor2[7] + motor1[28] * motor2[10] + motor1[29] * motor2[0] + (-(motor1[30] * motor2[6])); // e1 ^ (e3 ^ (einf ^ e0))
    finalmotor[30] = motor1[0] * motor2[30] + (-(motor1[6] * motor2[29])) + motor1[7] * motor2[28] + motor1[10] * motor2[15] + motor1[15] * motor2[10] + (-(motor1[28] * motor2[7])) + motor1[29] * motor2[6] + motor1[30] * motor2[0]; // e2 ^ (e3 ^ (einf ^ e0))
    
    return finalmotor;
}

//LINEAR INTERPOLATION TWISTS
RotorDef interpolateCGA_GAALOP(glm::vec3 translation1, glm::vec3 translation2, aiRotor srcQ, aiRotor dstQ, float alpha)
{
    float inner = srcQ.x * dstQ.x + srcQ.y * dstQ.y + srcQ.z * dstQ.z + srcQ.w * dstQ.w;
    if (inner<0)
    {
        dstQ = aiRotor(-dstQ.w, -dstQ.x,-dstQ.y,-dstQ.z);
    }
    
    float motor[27]; float motor2[27];
    
    float translatorX = (-(translation1.x / 2.0)); // e1 ^ einf
    float translatorY = (-(translation1.y / 2.0)); // e2 ^ einf
    float translatorZ = (-(translation1.z / 2.0)); // e3 ^ einf
    
    float translator2X  = (-(translation2.x / 2.0)); // e1 ^ einf
    float translator2Y  = (-(translation2.y / 2.0)); // e2 ^ einf
    float translator2Z  = (-(translation2.z / 2.0)); // e3 ^ einf
    
    motor[0] = srcQ.w; // 1.0
    motor[6] = srcQ.x; // e1 ^ e2
    motor[7] = srcQ.y; // e1 ^ e3
    motor[8] = translatorX * srcQ.w + (-(translatorY * srcQ.x)) + (-(translatorZ * srcQ.y)); // e1 ^ einf
    motor[10] = srcQ.z; // e2 ^ e3
    motor[11] = translatorX * srcQ.x + translatorY * srcQ.w + (-(translatorZ * srcQ.z)); // e2 ^ einf
    motor[13] = translatorX * srcQ.y + translatorY * srcQ.z + translatorZ * srcQ.w; // e3 ^ einf
    motor[26] = translatorX * srcQ.z + (-(translatorY * srcQ.y)) + translatorZ * srcQ.x; // e1 ^ (e2 ^ (e3 ^ einf))
    
    motor2[0] = dstQ.w; // 1.0
    motor2[6] = dstQ.x; // e1 ^ e2
    motor2[7] = dstQ.y; // e1 ^ e3
    motor2[8] = translator2X * dstQ.w + (-(translator2Y * dstQ.x)) + (-(translator2Z * dstQ.y)); // e1 ^ einf
    motor2[10] = dstQ.z; // e2 ^ e3
    motor2[11] = translator2X * dstQ.x + translator2Y * dstQ.w + (-(translator2Z * dstQ.z)); // e2 ^ einf
    motor2[13] = translator2X * dstQ.y + translator2Y * dstQ.z + translator2Z * dstQ.w; // e3 ^ einf
    motor2[26] = translator2X * dstQ.z + (-(translator2Y *dstQ.y)) + translator2Z * dstQ.x;
    
    float scalar = motor[0] * (1.0 - alpha) + motor2[0] * alpha; // 1.0
    float e1e2 = motor[6] * (1.0 - alpha) + motor2[6] * alpha; // e1 ^ e2
    float e1e3 = motor[7] * (1.0 - alpha) + motor2[7] * alpha; // e1 ^ e3
    float e1einf = motor[8] * (1.0 - alpha) + motor2[8] * alpha; // e1 ^ einf
    float e2e3 = motor[10] * (1.0 - alpha) + motor2[10] * alpha; // e2 ^ e3
    float e2einf = motor[11] * (1.0 - alpha) + motor2[11] * alpha; // e2 ^ einf
    float e3einf = motor[13] * (1.0 - alpha) + motor2[13] * alpha; // e3 ^ einf
    float e2e3einf = motor[26] * (1.0 - alpha) + motor2[26] * alpha; // e1 ^ (e2 ^ (e3 ^ einf))
    
    return RotorDef(scalar, e1e2, e1e3, e1einf, e2e3, e2einf, e3einf, e2e3einf);
}


RotorDefScale gpMotorDilator(RotorDef motor, float Dilator)
{
    RotorDefScale newmotor1;
    
    newmotor1.scalar = motor.scalar; // 1.0
    newmotor1.e1e2 = motor.e1e2; // e1 ^ e2
    newmotor1.e1e3 = motor.e1e3; // e1 ^ e3
    newmotor1.e1einf = motor.e1einf + motor.e1einf * Dilator; // e1 ^ einf
    newmotor1.e2e3 = motor.e2e3; // e2 ^ e3
    newmotor1.e2einf = motor.e2einf + motor.e2einf * Dilator; // e2 ^ einf
    newmotor1.e3einf = motor.e3einf + motor.e3einf * Dilator; // e3 ^ einf
    newmotor1.e15 = motor.scalar * Dilator; // einf ^ e0
    newmotor1.e2e3einf = motor.e2e3einf + motor.e2e3einf * Dilator; // e1 ^ (e2 ^ (e3 ^ einf))
    newmotor1.e28 = motor.e1e2 * Dilator; // e1 ^ (e2 ^ (einf ^ e0))
    newmotor1.e29 = motor.e1e3 * Dilator; // e1 ^ (e3 ^ (einf ^ e0))
    newmotor1.e30 = motor.e2e3 * Dilator; // e2 ^ (e3 ^ (einf ^ e0))
    
    return newmotor1;
}

RotorDef rotationInterpolateTranslationCGA_GAALOP(glm::vec3 translation1, glm::vec3 translation2, aiRotor srcQ, float alpha)
{
    float finalT[32]; float interpolatedT[32]; float R[32]; float translatornew[32]; float translatornew2[32]; float TtotQ[32];
    
    translatornew[0] = 1.0; // 1.0
    translatornew[8] = (-(translation1.x / 2.0)); // e1 ^ einf
    translatornew[11] = (-(translation1.y / 2.0)); // e2 ^ einf
    translatornew[13] = (-(translation1.z / 2.0)); // e3 ^ einf
    
    R[0] = srcQ.w;
    R[6] = srcQ.x;
    R[7] = srcQ.y;
    R[10] =srcQ.z;
    
    translatornew2[0] = 1.0; // 1.0
    translatornew2[8] = (-(translation2.x / 2.0)); // e1 ^ einf
    translatornew2[11] = (-( translation2.y / 2.0)); // e2 ^ einf
    translatornew2[13] = (-(translation2.z / 2.0)); // e3 ^ einf
    
    TtotQ[0] = 1.0; // 1.0
    TtotQ[8] = translatornew2[8] + (-translatornew[8]); // e1 ^ einf
    TtotQ[11] = translatornew2[11] + (-translatornew[11]); // e2 ^ einf
    TtotQ[13] = translatornew2[13] + (-translatornew[13]); // e3 ^ einf
    interpolatedT[0] = 1.0 + alpha + (alpha * alpha) / 2.0 + alpha * alpha * alpha * 0.16666666666666666 + alpha * alpha * alpha * alpha * 0.041666666666666664; // 1.0
    interpolatedT[8] = alpha * TtotQ[8] + (alpha * alpha * TtotQ[8] + alpha * TtotQ[8] * alpha) / 2.0 + (alpha * alpha * alpha * TtotQ[8] + (alpha * alpha * TtotQ[8] + alpha * TtotQ[8] * alpha) * alpha) * 0.16666666666666666 + (alpha * alpha * alpha * alpha * TtotQ[8] + (alpha * alpha * alpha * TtotQ[8] + (alpha * alpha * TtotQ[8] + alpha * TtotQ[8] * alpha) * alpha) * alpha) * 0.041666666666666664; // e1 ^ einf
    interpolatedT[11] = alpha * TtotQ[11] + (alpha * alpha * TtotQ[11] + alpha * TtotQ[11] * alpha) / 2.0 + (alpha * alpha * alpha * TtotQ[11] + (alpha * alpha * TtotQ[11] + alpha * TtotQ[11] * alpha) * alpha) * 0.16666666666666666 + (alpha * alpha * alpha * alpha * TtotQ[11] + (alpha * alpha * alpha * TtotQ[11] + (alpha * alpha * TtotQ[11] + alpha * TtotQ[11] * alpha) * alpha) * alpha) * 0.041666666666666664; // e2 ^ einf
    interpolatedT[13] = alpha * TtotQ[13] + (alpha * alpha * TtotQ[13] + alpha * TtotQ[13] * alpha) / 2.0 + (alpha * alpha * alpha * TtotQ[13] + (alpha * alpha * TtotQ[13] + alpha * TtotQ[13] * alpha) * alpha) * 0.16666666666666666 + (alpha * alpha * alpha * alpha * TtotQ[13] + (alpha * alpha * alpha * TtotQ[13] + (alpha * alpha * TtotQ[13] + alpha * TtotQ[13] * alpha) * alpha) * alpha) * 0.041666666666666664; // e3 ^ einf
    finalT[0] = interpolatedT[0]; // 1.0
    finalT[8] = interpolatedT[8] + translatornew[8] * interpolatedT[0]; // e1 ^ einf
    finalT[11] = interpolatedT[11] + translatornew[11] * interpolatedT[0]; // e2 ^ einf
    finalT[13] = interpolatedT[13] + translatornew[13] * interpolatedT[0]; // e3 ^ einf
    float scalar = finalT[0] * R[0]; // 1.0
    float e1e2 = finalT[0] * R[6]; // e1 ^ e2
    float e1e3 = finalT[0] * R[7]; // e1 ^ e3
    float e1einf = finalT[8] * R[0] + (-(finalT[11] * R[6])) + (-(finalT[13] * R[7])); // e1 ^ einf
    float e2e3 = finalT[0] * R[10]; // e2 ^ e3
    float e2einf = finalT[8] * R[6] + finalT[11] * R[0] + (-(finalT[13] * R[10])); // e2 ^ einf
    float e3einf = finalT[8] * R[7] + finalT[11] * R[10] + finalT[13] * R[0]; // e3 ^ einf
    float e2e3einf = finalT[8] * R[10] + (-(finalT[11] * R[7])) + finalT[13] * R[6]; // e1 ^ (e2 ^ (e3 ^ einf))
    
    return RotorDef(scalar, e1e2, e1e3, e1einf, e2e3, e2einf, e3einf, e2e3einf);
}
