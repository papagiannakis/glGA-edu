#version 430
//determines the local group size, the number of times that this specific compute shader will be executed for each work group. (size of 1 pixel - 1x1)
layout(local_size_x = 1, local_size_y = 1) in;
//determines the format of the image that is going to be the output.
layout(rgba32f, binding = 0) uniform image2D img_output;

void main() {
  // base pixel colour for image
  vec4 pixel = vec4(0.0, 225.0, 0.0, 1.0);
  // get index in global work group i.e x,y position
  ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
  
  float max_x = 5.0;
  float max_y = 5.0;
  ivec2 dims = imageSize(img_output); // fetch image dimensions
  float x = (float(pixel_coords.x * 2 - dims.x) / dims.x);
  float y = (float(pixel_coords.y * 2 - dims.y) / dims.y);
  //ray origin, cast rays from the eye (each pixel of the output image)
  vec3 ray_o = vec3(x * max_x, y * max_y, 0.0);
  //the direction of a ray
  vec3 ray_d = vec3(0.0, 0.0, -1.0); // ortho

  //sphere position
  vec3 sphere_c = vec3(0.0, 0.0, -10.0);
  //sphere radius
  float sphere_r = 1.0;

  //check if ray intersects the sphere
  vec3 omc = ray_o - sphere_c;
  float b = dot(ray_d, omc);
  float c = dot(omc, omc) - sphere_r * sphere_r;
  float bsqmc = b * b - c;
  // if hits one or both sides change color of pixel
  if (bsqmc >= 0.0) {
    pixel = vec4(0.4, 0.4, 1.0, 1.0);
  }
  
  // output to a specific pixel in the image
  imageStore(img_output, pixel_coords, pixel);
}
