/*
* Copyright 2006 Sony Computer Entertainment Inc.
*
* Licensed under the MIT Open Source License, for details please see license.txt or the website
* http://www.opensource.org/licenses/mit-license.php
*
*/ 

string description="Basic Phong";


float g_kd
<
string UIName="Diffuse Scale";
string UIWidget="Slider";
float UIMin=0.0;
float UIMax=2.0;
float UIStep=0.1000000015;
> =1.0;

float g_ks
<
string UIName="Specular Scale";
string UIWidget="Slider";
float UIMin=0.0;
float UIMax=20.0;
float UIStep=0.009999999776;
> =5.0;

float g_specpower
<
string UIName="Specular Power";
string UIWidget="Slider";
float UIMin=0.0;
float UIMax=400.0;
float UIStep=20.0;
> =100.0f;

float3 g_lightpos:LightPosition
<
string Object="PointLight";
string Space="World";
> ={100.0f,100.0f,-100.0f};


float3 g_ambcolor
<
string UIName="Ambient Color";
string UIWidget="Color";
> ={0.3199999928,0.3199999928,0.02999999933};

float3 g_diffcolor
<
string UIName="Diffuse Color";
string UIWidget="Color";
> ={0.01499999966,0.3639999926,1.0};

float3 g_speccolor
<
string UIName="Specular Color";
string UIWidget="Color";
> ={0.2639999986,0.3720000088,0.3720000088};


float g_time:TIME;
float4x4 g_WorldIT:WorldInverseTranspose;
float4x4 g_WorldViewProj:WorldViewProjection;
float4x4 g_World:World;
float4x4 g_ViewInv:ViewInverse;

sampler2D g_colorsampler;

struct outVertexData{
varying float4 HPosition:POSITION;
varying float2 UV:TEXCOORD0;
varying float3 lightvec:TEXCOORD1;
varying float3 worldeyevec:TEXCOORD2;
varying float3 worldnormal:TEXCOORD3;
};

outVertexData basic_phong_VS(
varying in float3 Position:POSITION,
varying in float4 Normal:NORMAL0,
varying in float2 UV:TEXCOORD0,
uniform in float3 lightpos,
uniform in float4x4 world,
uniform in float4x4 viewinv,
uniform in float4x4 worldviewproj,
uniform in sampler2D colorsampler
)
{
outVertexData OUT;

float4 Po=float4(Position,1.0);
float3 Nw=float3(mul((float3x3)world,Normal.xyz));
float3 Pw=mul(world,Po).xyz;
float3 Iw=float3(viewinv[0].w,viewinv[1].w,viewinv[2].w);

OUT.HPosition=mul(worldviewproj,Po);
OUT.UV.xy=UV.xy;
OUT.lightvec=lightpos-Pw;
OUT.worldeyevec=(Iw-Pw);
OUT.worldnormal=Nw.xyz;

return OUT;
}

float3 basic_phong_PS(outVertexData IN,
uniform in float3 ambcolor,
uniform in float3 diffcolor,
uniform in float kd,
uniform in float3 speccolor,
uniform in float ks,
uniform in float specpower,
uniform in sampler2D colorsampler
):COLOR
{
float3 L=normalize(IN.lightvec);
float3 V=normalize(IN.worldeyevec);
float3 N=normalize(IN.worldnormal);
float3 H=normalize(L+V);
float3 light=lit(dot(L,N),dot(H,N),specpower);
float3 spec=light.zzz;
float3 diff=light.yyy;
float4 tex=tex2D(colorsampler,IN.UV.xy);
return tex*(kd*diff+ambcolor)+speccolor*(ks*spec);
}




